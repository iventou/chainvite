// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: chainvite/ticket/tx.proto

package ticket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName   = "/chainvite.ticket.Msg/UpdateParams"
	Msg_CreateTicket_FullMethodName   = "/chainvite.ticket.Msg/CreateTicket"
	Msg_UpdateTicket_FullMethodName   = "/chainvite.ticket.Msg/UpdateTicket"
	Msg_DeleteTicket_FullMethodName   = "/chainvite.ticket.Msg/DeleteTicket"
	Msg_MintTicket_FullMethodName     = "/chainvite.ticket.Msg/MintTicket"
	Msg_ValidateTicket_FullMethodName = "/chainvite.ticket.Msg/ValidateTicket"
	Msg_TransferTicket_FullMethodName = "/chainvite.ticket.Msg/TransferTicket"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateTicket(ctx context.Context, in *MsgCreateTicket, opts ...grpc.CallOption) (*MsgCreateTicketResponse, error)
	UpdateTicket(ctx context.Context, in *MsgUpdateTicket, opts ...grpc.CallOption) (*MsgUpdateTicketResponse, error)
	DeleteTicket(ctx context.Context, in *MsgDeleteTicket, opts ...grpc.CallOption) (*MsgDeleteTicketResponse, error)
	MintTicket(ctx context.Context, in *MsgMintTicket, opts ...grpc.CallOption) (*MsgMintTicketResponse, error)
	ValidateTicket(ctx context.Context, in *MsgValidateTicket, opts ...grpc.CallOption) (*MsgValidateTicketResponse, error)
	TransferTicket(ctx context.Context, in *MsgTransferTicket, opts ...grpc.CallOption) (*MsgTransferTicketResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTicket(ctx context.Context, in *MsgCreateTicket, opts ...grpc.CallOption) (*MsgCreateTicketResponse, error) {
	out := new(MsgCreateTicketResponse)
	err := c.cc.Invoke(ctx, Msg_CreateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTicket(ctx context.Context, in *MsgUpdateTicket, opts ...grpc.CallOption) (*MsgUpdateTicketResponse, error) {
	out := new(MsgUpdateTicketResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTicket(ctx context.Context, in *MsgDeleteTicket, opts ...grpc.CallOption) (*MsgDeleteTicketResponse, error) {
	out := new(MsgDeleteTicketResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintTicket(ctx context.Context, in *MsgMintTicket, opts ...grpc.CallOption) (*MsgMintTicketResponse, error) {
	out := new(MsgMintTicketResponse)
	err := c.cc.Invoke(ctx, Msg_MintTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ValidateTicket(ctx context.Context, in *MsgValidateTicket, opts ...grpc.CallOption) (*MsgValidateTicketResponse, error) {
	out := new(MsgValidateTicketResponse)
	err := c.cc.Invoke(ctx, Msg_ValidateTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferTicket(ctx context.Context, in *MsgTransferTicket, opts ...grpc.CallOption) (*MsgTransferTicketResponse, error) {
	out := new(MsgTransferTicketResponse)
	err := c.cc.Invoke(ctx, Msg_TransferTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateTicket(context.Context, *MsgCreateTicket) (*MsgCreateTicketResponse, error)
	UpdateTicket(context.Context, *MsgUpdateTicket) (*MsgUpdateTicketResponse, error)
	DeleteTicket(context.Context, *MsgDeleteTicket) (*MsgDeleteTicketResponse, error)
	MintTicket(context.Context, *MsgMintTicket) (*MsgMintTicketResponse, error)
	ValidateTicket(context.Context, *MsgValidateTicket) (*MsgValidateTicketResponse, error)
	TransferTicket(context.Context, *MsgTransferTicket) (*MsgTransferTicketResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateTicket(context.Context, *MsgCreateTicket) (*MsgCreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedMsgServer) UpdateTicket(context.Context, *MsgUpdateTicket) (*MsgUpdateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedMsgServer) DeleteTicket(context.Context, *MsgDeleteTicket) (*MsgDeleteTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedMsgServer) MintTicket(context.Context, *MsgMintTicket) (*MsgMintTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintTicket not implemented")
}
func (UnimplementedMsgServer) ValidateTicket(context.Context, *MsgValidateTicket) (*MsgValidateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTicket not implemented")
}
func (UnimplementedMsgServer) TransferTicket(context.Context, *MsgTransferTicket) (*MsgTransferTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTicket not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTicket(ctx, req.(*MsgCreateTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTicket(ctx, req.(*MsgUpdateTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTicket(ctx, req.(*MsgDeleteTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MintTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintTicket(ctx, req.(*MsgMintTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ValidateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgValidateTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ValidateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ValidateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ValidateTicket(ctx, req.(*MsgValidateTicket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferTicket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_TransferTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferTicket(ctx, req.(*MsgTransferTicket))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainvite.ticket.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateTicket",
			Handler:    _Msg_CreateTicket_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _Msg_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _Msg_DeleteTicket_Handler,
		},
		{
			MethodName: "MintTicket",
			Handler:    _Msg_MintTicket_Handler,
		},
		{
			MethodName: "ValidateTicket",
			Handler:    _Msg_ValidateTicket_Handler,
		},
		{
			MethodName: "TransferTicket",
			Handler:    _Msg_TransferTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chainvite/ticket/tx.proto",
}
