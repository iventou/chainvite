// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: chainvite/device/tx.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_UpdateParams_FullMethodName       = "/chainvite.device.Msg/UpdateParams"
	Msg_CreateDevice_FullMethodName       = "/chainvite.device.Msg/CreateDevice"
	Msg_UpdateDevice_FullMethodName       = "/chainvite.device.Msg/UpdateDevice"
	Msg_DeleteDevice_FullMethodName       = "/chainvite.device.Msg/DeleteDevice"
	Msg_RegisterDevice_FullMethodName     = "/chainvite.device.Msg/RegisterDevice"
	Msg_UpdateDeviceStatus_FullMethodName = "/chainvite.device.Msg/UpdateDeviceStatus"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateDevice(ctx context.Context, in *MsgCreateDevice, opts ...grpc.CallOption) (*MsgCreateDeviceResponse, error)
	UpdateDevice(ctx context.Context, in *MsgUpdateDevice, opts ...grpc.CallOption) (*MsgUpdateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *MsgDeleteDevice, opts ...grpc.CallOption) (*MsgDeleteDeviceResponse, error)
	RegisterDevice(ctx context.Context, in *MsgRegisterDevice, opts ...grpc.CallOption) (*MsgRegisterDeviceResponse, error)
	UpdateDeviceStatus(ctx context.Context, in *MsgUpdateDeviceStatus, opts ...grpc.CallOption) (*MsgUpdateDeviceStatusResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateDevice(ctx context.Context, in *MsgCreateDevice, opts ...grpc.CallOption) (*MsgCreateDeviceResponse, error) {
	out := new(MsgCreateDeviceResponse)
	err := c.cc.Invoke(ctx, Msg_CreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDevice(ctx context.Context, in *MsgUpdateDevice, opts ...grpc.CallOption) (*MsgUpdateDeviceResponse, error) {
	out := new(MsgUpdateDeviceResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteDevice(ctx context.Context, in *MsgDeleteDevice, opts ...grpc.CallOption) (*MsgDeleteDeviceResponse, error) {
	out := new(MsgDeleteDeviceResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterDevice(ctx context.Context, in *MsgRegisterDevice, opts ...grpc.CallOption) (*MsgRegisterDeviceResponse, error) {
	out := new(MsgRegisterDeviceResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDeviceStatus(ctx context.Context, in *MsgUpdateDeviceStatus, opts ...grpc.CallOption) (*MsgUpdateDeviceStatusResponse, error) {
	out := new(MsgUpdateDeviceStatusResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateDevice(context.Context, *MsgCreateDevice) (*MsgCreateDeviceResponse, error)
	UpdateDevice(context.Context, *MsgUpdateDevice) (*MsgUpdateDeviceResponse, error)
	DeleteDevice(context.Context, *MsgDeleteDevice) (*MsgDeleteDeviceResponse, error)
	RegisterDevice(context.Context, *MsgRegisterDevice) (*MsgRegisterDeviceResponse, error)
	UpdateDeviceStatus(context.Context, *MsgUpdateDeviceStatus) (*MsgUpdateDeviceStatusResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateDevice(context.Context, *MsgCreateDevice) (*MsgCreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedMsgServer) UpdateDevice(context.Context, *MsgUpdateDevice) (*MsgUpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedMsgServer) DeleteDevice(context.Context, *MsgDeleteDevice) (*MsgDeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedMsgServer) RegisterDevice(context.Context, *MsgRegisterDevice) (*MsgRegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedMsgServer) UpdateDeviceStatus(context.Context, *MsgUpdateDeviceStatus) (*MsgUpdateDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceStatus not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDevice(ctx, req.(*MsgCreateDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDevice(ctx, req.(*MsgUpdateDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteDevice(ctx, req.(*MsgDeleteDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDevice(ctx, req.(*MsgRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDeviceStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDeviceStatus(ctx, req.(*MsgUpdateDeviceStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chainvite.device.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Msg_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Msg_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Msg_DeleteDevice_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _Msg_RegisterDevice_Handler,
		},
		{
			MethodName: "UpdateDeviceStatus",
			Handler:    _Msg_UpdateDeviceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chainvite/device/tx.proto",
}
